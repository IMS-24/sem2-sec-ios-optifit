// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using qb8s.net.OptiFit.Persistence.Context;

#nullable disable

namespace qb8s.net.OptiFit.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024204018_initial_migration_muscles")]
    partial class initial_migration_muscles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.Muscle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("I18NCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("i18n_code");

                    b.HasKey("Id")
                        .HasName("pk_muscle");

                    b.HasIndex("I18NCode")
                        .IsUnique()
                        .HasDatabaseName("ix_muscle_i18n_code");

                    b.ToTable("muscle", (string)null);
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.MuscleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("I18NCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("i18n_code");

                    b.HasKey("Id")
                        .HasName("pk_muscle_group");

                    b.HasIndex("I18NCode")
                        .IsUnique()
                        .HasDatabaseName("ix_muscle_group_i18n_code");

                    b.ToTable("muscle_group", (string)null);
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.MuscleGroupMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("MuscleGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("muscle_group_id");

                    b.Property<Guid>("MuscleId")
                        .HasColumnType("uuid")
                        .HasColumnName("muscle_id");

                    b.HasKey("Id")
                        .HasName("pk_muscle_group_mapping");

                    b.HasIndex("MuscleGroupId")
                        .HasDatabaseName("ix_muscle_group_mapping_muscle_group_id");

                    b.HasIndex("MuscleId")
                        .HasDatabaseName("ix_muscle_group_mapping_muscle_id");

                    b.ToTable("muscle_group_mapping", (string)null);
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset?>("DateOfBirthUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth_utc");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("first_name");

                    b.Property<bool>("InitialSetupDone")
                        .HasColumnType("boolean")
                        .HasColumnName("initial_setup_done");

                    b.Property<DateTimeOffset?>("LastLoginUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_utc");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("OId")
                        .HasColumnType("uuid")
                        .HasColumnName("o_id");

                    b.Property<DateTimeOffset>("RegisteredUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("UpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_utc")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("user_name");

                    b.Property<Guid?>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("034ba653-e026-4f13-a050-3d0d9b408be2"))
                        .HasColumnName("user_role_id");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_user_name");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_user_user_role_id");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("275cfdca-c686-4ea1-80b1-f2425b1602c5"),
                            DateOfBirthUtc = new DateTimeOffset(new DateTime(1992, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            FirstName = "Arnold",
                            InitialSetupDone = false,
                            LastName = "Schwarzenegger",
                            OId = new Guid("00000000-0000-0000-0000-000000000000"),
                            RegisteredUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            UpdatedUtc = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            UserName = "TheTerminator"
                        });
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_name");

                    b.ToTable("user_role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a42ccbdf-e689-4b12-9333-88c19fe8462d"),
                            Name = "Root-Admin"
                        },
                        new
                        {
                            Id = new Guid("8e281066-f933-4f7e-95c8-c4acab20a7e9"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("da18fe0f-5590-471d-9288-9481bc6396d7"),
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("034ba653-e026-4f13-a050-3d0d9b408be2"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("47c81565-a603-42a7-bbdc-a3d41ccfb022"),
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.MuscleGroupMapping", b =>
                {
                    b.HasOne("qb8s.net.OptiFit.Core.Entities.MuscleGroup", "MuscleGroup")
                        .WithMany("MuscleGroupMappings")
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_muscle_group_mapping_muscle_group_muscle_group_id");

                    b.HasOne("qb8s.net.OptiFit.Core.Entities.Muscle", "Muscle")
                        .WithMany("MuscleGroupMappings")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_muscle_group_mapping_muscle_muscle_id");

                    b.Navigation("Muscle");

                    b.Navigation("MuscleGroup");
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.User", b =>
                {
                    b.HasOne("qb8s.net.OptiFit.Core.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("fk_user_user_role_user_role_id");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.Muscle", b =>
                {
                    b.Navigation("MuscleGroupMappings");
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.MuscleGroup", b =>
                {
                    b.Navigation("MuscleGroupMappings");
                });

            modelBuilder.Entity("qb8s.net.OptiFit.Core.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
